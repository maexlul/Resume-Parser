# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-qIrj_VjPfNLSwILPqtPR2e3wLkM376e
"""

import streamlit as st
import pandas as pd
import json
from file_handler import extract_text
from ner_agent import ResumeParser
from postprocess import PostProcessor
from pdf_writer import PDFWriter

st.title("Resume Parser")
st.write("Upload resume files (PDF or DOCX) to extract structured information. "
         "You can upload a single file or multiple files for batch parsing.")
uploaded_files = st.file_uploader("Choose PDF or DOCX files", type=['pdf', 'docx'], accept_multiple_files=True)
if uploaded_files:
    parser = ResumeParser()
    postprocessor = PostProcessor()
    pdf_writer = PDFWriter()

    results = []  

    for uploaded_file in uploaded_files:
        filename = uploaded_file.name
        st.markdown(f"### Results for **{filename}**")
        try:
            file_bytes = uploaded_file.read()
            raw_text = extract_text(file_bytes, filename)
        except Exception as e:
            st.error(f"Error reading file {filename}: {e}")
            continue

        parsed_data = parser.parse(raw_text)
        final_data = postprocessor.process(parsed_data)
        results.append(final_data)

        profile_fields = ["Name", "Email", "Phone", "Location", "Summary"]
        profile_values = [
            final_data.get("name") or "",
            final_data.get("email") or "",
            final_data.get("phone") or "",
            final_data.get("location") or "",
            final_data.get("summary") or ""
        ]
        profile_df = pd.DataFrame({"Field": profile_fields, "Value": profile_values})
        st.table(profile_df)

        st.markdown("**Education**")
        if final_data["education"]:
            edu_df = pd.DataFrame(final_data["education"])
            edu_df = edu_df.fillna("")  
            edu_df.columns = ["School", "Degree", "GPA", "Grad Date"]  
            st.table(edu_df)
        else:
            st.write("_No education details found._")

        st.markdown("**Work Experience**")
        if final_data["work_experience"]:
            exp_data = []
            for exp in final_data["work_experience"]:
                exp_data.append({
                    "Company": exp.get("company", ""),
                    "Title": exp.get("title", ""),
                    "Dates": exp.get("dates", "")
                })
            exp_df = pd.DataFrame(exp_data).fillna("")
            st.table(exp_df)
        else:
            st.write("_No work experience details found._")

        skills_display = ", ".join(final_data["skills"]) if final_data["skills"] else "None"
        certs_display = ", ".join(final_data["certifications"]) if final_data["certifications"] else "None"
        extra_display = ", ".join(final_data["extracurriculars"]) if final_data["extracurriculars"] else "None"
        st.markdown(f"**Skills:** {skills_display}")
        st.markdown(f"**Certifications:** {certs_display}")
        st.markdown(f"**Extracurriculars:** {extra_display}")

        with st.expander("View Raw Text"):
            st.text(raw_text)
        with st.expander("View JSON"):
            st.json(final_data)
        st.markdown("---") 

    if len(results) == 1:
        result = results[0]
        json_data = json.dumps(result, indent=2)
        st.download_button("Download JSON", data=json_data, file_name="resume_data.json", mime="application/json")
        pdf_bytes = pdf_writer.generate(result)
        st.download_button("Download PDF Summary", data=pdf_bytes, file_name="resume_summary.pdf", mime="application/pdf")
    else:
        json_data = json.dumps(results, indent=2)
        st.download_button("Download JSON (all resumes)", data=json_data, file_name="resumes_data.json", mime="application/json")
        pdf_bytes = pdf_writer.generate(results)
        st.download_button("Download PDF Summary (all)", data=pdf_bytes, file_name="resumes_summary.pdf", mime="application/pdf")