# -*- coding: utf-8 -*-
"""ner_agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dUHhza9E0exVfH0WKLctpa01VPFuBfF3
"""

import spacy
import re

class ResumeParser:
    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")
        self.email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b')
        self.phone_pattern = re.compile(r'(?:(?<=\b)|(?<=^))\+?\(?\d[\d\-\s\(\)]{8,}\d\b')
        self.degree_pattern = re.compile(
            r'\b(Bachelor|Master|Doctorate|Associate|Diploma|B\.?Sc|M\.?Sc|B\.?Eng|M\.?Eng|B\.?Tech|M\.?Tech|MBA|Ph\.?D)\b',
            flags=re.IGNORECASE
        )

    def parse(self, text: str) -> dict:
        """
        Parse the resume text and extract structured information.
        :param text: Raw text of the resume.
        :return: Dictionary with extracted fields.
        """
        data = {
            "name": None,
            "email": None,
            "phone": None,
            "location": None,
            "summary": None,
            "education": [],
            "work_experience": [],
            "skills": [],
            "certifications": [],
            "extracurriculars": []
        }

        doc = self.nlp(text)
        for ent in doc.ents:
            if ent.label_ == "PERSON":
                data["name"] = ent.text.strip()
                break
        if not data["name"]:
            lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
            if lines:
                first_line = lines[0]
                if "@" not in first_line and not re.search(r'\d', first_line):
                    data["name"] = first_line

        match = self.email_pattern.search(text)
        if match:
            data["email"] = match.group(0).strip()

        phone_matches = list(self.phone_pattern.finditer(text))
        phones = []
        for m in phone_matches:
            candidate = m.group(0)
            digits = re.sub(r'\D', '', candidate)
            if len(digits) >= 10:
                phones.append((m.start(), candidate.strip()))
        phones.sort(key=lambda x: x[0])
        if phones:
            data["phone"] = phones[0][1]

        locations = [ent for ent in doc.ents if ent.label_ == "GPE"]
        if locations:
            locations.sort(key=lambda ent: ent.start_char)
            first_loc = locations[0]
            loc_text = first_loc.text
            end_char = first_loc.end_char
            for ent in locations[1:]:
                if ent.start_char <= end_char + 2:  
                    end_char = ent.end_char
                    loc_text = text[first_loc.start_char:ent.end_char]
                else:
                    break
            data["location"] = loc_text.strip()

        lines = text.splitlines()
        def find_section_index(section_names):
            for i, line in enumerate(lines):
                if not line:
                    continue
                low = line.strip().lower()
                for name in section_names:
                    if low.startswith(name.lower()):
                        return i
            return None

        summary_idx = find_section_index(["summary", "objective"])
        if summary_idx is not None:
            heading_line = lines[summary_idx]
            content_start_idx = summary_idx
            summary_text = ""
            if ':' in heading_line:
                parts = heading_line.split(':', 1)
                if len(parts) > 1:
                    summary_text = parts[1].strip()
                content_start_idx = summary_idx + 1
            else:
                content_start_idx = summary_idx + 1
            for j in range(content_start_idx, len(lines)):
                if not lines[j].strip():
                    break
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("work experience") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("extracurricular"):
                    break
                summary_text += (" " + lines[j].strip()) if summary_text else lines[j].strip()
            data["summary"] = summary_text.strip()
        else:
            first_section_indices = []
            for section in ["education", "experience", "work experience", "skills", "certification", "certifications", "extracurricular", "activities", "projects"]:
                idx = find_section_index([section])
                if idx is not None:
                    first_section_indices.append(idx)
            first_section_idx = min(first_section_indices) if first_section_indices else None
            contact_lines = set()
            if data["name"]:
                for i, line in enumerate(lines):
                    if line.strip() == data["name"]:
                        contact_lines.add(i)
            if data["email"]:
                for i, line in enumerate(lines):
                    if data["email"] in line:
                        contact_lines.add(i)
            if data["phone"]:
                for i, line in enumerate(lines):
                    if data["phone"] in line:
                        contact_lines.add(i)
            if data["location"]:
                for i, line in enumerate(lines):
                    if line.strip().startswith(data["location"]):
                        contact_lines.add(i)
            contact_end_idx = (max(contact_lines) + 1) if contact_lines else 0
            summary_text = ""
            for j in range(contact_end_idx, len(lines) if first_section_idx is None else first_section_idx):
                if not lines[j].strip():
                    break
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("work experience") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("extracurricular") or sec.startswith("project"):
                    break
                summary_text += (" " + lines[j].strip()) if summary_text else lines[j].strip()
            data["summary"] = summary_text.strip() if summary_text else None

        edu_idx = find_section_index(["education"])
        edu_end_idx = None
        if edu_idx is not None:
            for j in range(edu_idx + 1, len(lines)):
                if not lines[j].strip():
                    continue
                sec = lines[j].strip().lower()
                if sec.startswith("experience") or sec.startswith("work experience") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("extracurricular") or sec.startswith("project"):
                    edu_end_idx = j
                    break
            if edu_end_idx is None:
                edu_end_idx = len(lines)
            education_lines = lines[edu_idx + 1:edu_end_idx]
            entries = []
            current_entry = []
            for line in education_lines:
                if line.strip() == "":
                    if current_entry:
                        entries.append(current_entry)
                        current_entry = []
                else:
                    current_entry.append(line)
            if current_entry:
                entries.append(current_entry)
            for entry_lines in entries:
                entry_text = " ".join([ln.strip() for ln in entry_lines])
                if not entry_text:
                    continue
                edu_entry = {"school": None, "degree": None, "GPA": None, "grad_date": None}
                entry_doc = self.nlp(entry_text)
                orgs = [ent for ent in entry_doc.ents if ent.label_ == "ORG"]
                if orgs:
                    edu_entry["school"] = orgs[0].text.strip()
                grad_date = None
                date_match = re.search(r'\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}\b', entry_text, flags=re.IGNORECASE)
                if date_match:
                    grad_date = date_match.group(0).strip()
                else:
                    years = re.findall(r'\b(19|20)\d{2}\b', entry_text)
                    if years:
                        grad_date = years[-1]
                if grad_date:
                    if "expected" in entry_text.lower():
                        edu_entry["grad_date"] = grad_date if grad_date.lower().startswith(("jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec")) else grad_date
                    else:
                        edu_entry["grad_date"] = grad_date
                degree_match = self.degree_pattern.search(entry_text)
                if degree_match:
                    deg_idx = degree_match.start()
                    tokens = entry_text[max(0, deg_idx-30):deg_idx+50].split()
                    degree_substr = entry_text[deg_idx:]
                    stop_idx = None
                    for stop_char in [',', ';', '|', '-']:
                        si = degree_substr.find(stop_char)
                        if si != -1:
                            stop_idx = deg_idx + si
                            break
                    if stop_idx:
                        edu_entry["degree"] = entry_text[deg_idx:stop_idx].strip().strip(",;-")
                    else:
                        edu_entry["degree"] = entry_text[deg_idx:].strip().strip(",;-")
                    if edu_entry["degree"]:
                        edu_entry["degree"] = edu_entry["degree"].rstrip('.')
                gpa_match = re.search(r'\bGPA[:\s]*([\d\.]+)', entry_text, flags=re.IGNORECASE)
                if not gpa_match:
                    gpa_match = re.search(r'\bCGPA[:\s]*([\d\.]+)', entry_text, flags=re.IGNORECASE)
                if gpa_match:
                    edu_entry["GPA"] = gpa_match.group(1)
                if not edu_entry["school"]:
                    if edu_entry["degree"]:
                        deg_pos = entry_text.lower().find(edu_entry["degree"].lower())
                        school_candidate = entry_text[:deg_pos].strip(" ,;-")
                        if school_candidate:
                            edu_entry["school"] = school_candidate
                    elif grad_date:
                        date_pos = entry_text.find(str(grad_date))
                        school_candidate = entry_text[:date_pos].strip(" ,;-")
                        if school_candidate:
                            edu_entry["school"] = school_candidate
                if edu_entry["school"] or edu_entry["degree"]:
                    data["education"].append(edu_entry)
        else:
            education_text = text
            degree_positions = []
            for match in self.degree_pattern.finditer(education_text):
                degree_positions.append(match.start())
            degree_positions = sorted(set(degree_positions))
            for pos in degree_positions:
                start_idx = education_text.rfind("\n", 0, pos)
                end_idx = education_text.find("\n", pos)
                if start_idx == -1:
                    start_idx = 0
                if end_idx == -1:
                    end_idx = len(education_text)
                entry_text = education_text[start_idx:end_idx].strip()
                if len(entry_text) < 20 and end_idx < len(education_text):
                    next_end_idx = education_text.find("\n", end_idx + 1)
                    if next_end_idx == -1:
                        next_end_idx = len(education_text)
                    entry_text = education_text[start_idx:next_end_idx].strip()
                duplicate = False
                for existing in data["education"]:
                    if existing.get("school") and existing["school"] in entry_text:
                        duplicate = True
                        break
                    if existing.get("degree") and existing["degree"] in entry_text:
                        duplicate = True
                        break
                if duplicate or not entry_text:
                    continue
                edu_entry = {"school": None, "degree": None, "GPA": None, "grad_date": None}
                entry_doc = self.nlp(entry_text)
                orgs = [ent for ent in entry_doc.ents if ent.label_ == "ORG"]
                if orgs:
                    edu_entry["school"] = orgs[0].text.strip()
                grad_date = None
                date_match = re.search(r'\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}\b', entry_text, flags=re.IGNORECASE)
                if date_match:
                    grad_date = date_match.group(0).strip()
                else:
                    years = re.findall(r'\b(19|20)\d{2}\b', entry_text)
                    if years:
                        grad_date = years[-1]
                if grad_date:
                    edu_entry["grad_date"] = grad_date
                degree_match = self.degree_pattern.search(entry_text)
                if degree_match:
                    deg_idx = degree_match.start()
                    degree_substr = entry_text[deg_idx:]
                    stop_idx = None
                    for stop_char in [',', ';', '|', '-']:
                        si = degree_substr.find(stop_char)
                        if si != -1:
                            stop_idx = deg_idx + si
                            break
                    if stop_idx:
                        edu_entry["degree"] = entry_text[deg_idx:stop_idx].strip().strip(",;-")
                    else:
                        edu_entry["degree"] = entry_text[deg_idx:].strip().strip(",;-")
                    if edu_entry["degree"]:
                        edu_entry["degree"] = edu_entry["degree"].rstrip('.')
                gpa_match = re.search(r'\b(?:C?GPA)[:\s]*([\d\.]+)', entry_text, flags=re.IGNORECASE)
                if gpa_match:
                    edu_entry["GPA"] = gpa_match.group(1)
                if not edu_entry["school"]:
                    if edu_entry["degree"]:
                        deg_pos = entry_text.lower().find(edu_entry["degree"].lower())
                        school_candidate = entry_text[:deg_pos].strip(" ,;-")
                        if school_candidate:
                            edu_entry["school"] = school_candidate
                    elif grad_date:
                        date_pos = entry_text.find(str(grad_date))
                        school_candidate = entry_text[:date_pos].strip(" ,;-")
                        if school_candidate:
                            edu_entry["school"] = school_candidate
                if edu_entry["school"] or edu_entry["degree"]:
                    data["education"].append(edu_entry)

        exp_idx = find_section_index(["work experience", "experience", "professional experience", "internship", "internships"])
        exp_end_idx = None
        if exp_idx is not None:
            for j in range(exp_idx + 1, len(lines)):
                if not lines[j].strip():
                    continue
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("extracurricular") or sec.startswith("project"):
                    exp_end_idx = j
                    break
            if exp_end_idx is None:
                exp_end_idx = len(lines)
            experience_lines = lines[exp_idx + 1:exp_end_idx]
            entries = []
            current_entry = []
            for line in experience_lines:
                if line.strip() == "":
                    if current_entry:
                        entries.append(current_entry)
                        current_entry = []
                else:
                    current_entry.append(line)
            if current_entry:
                entries.append(current_entry)
            for entry_lines in entries:
                entry_text = " ".join([ln.strip() for ln in entry_lines if ln.strip()])
                if not entry_text:
                    continue
                if "volunteer" in entry_text.lower():
                    continue
                exp_entry = {"company": None, "title": None, "description": [], "dates": None}
                header_lines = []
                desc_lines = []
                for ln in entry_lines:
                    if ln.strip().startswith(("•", "-", "*")):
                        desc_lines.append(ln.strip("•*- \t"))
                    else:
                        header_lines.append(ln.strip())
                header_text = " ".join(header_lines)
                date_range = None
                date_match = re.search(r'((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \d{4}|(19|20)\d{2})\s*[-–to]{1,3}\s*((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \d{4}|Present|Current|(19|20)\d{2})', header_text, flags=re.IGNORECASE)
                if date_match:
                    date_range = date_match.group(0)
                else:
                    single_date = re.search(r'\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)?\s*(19|20)\d{2}\b', header_text, flags=re.IGNORECASE)
                    if single_date:
                        date_range = single_date.group(0)
                if date_range:
                    exp_entry["dates"] = date_range.strip(" -–to")
                    header_text = header_text.replace(date_range, "")
                header_doc = self.nlp(header_text)
                org_ents = [ent for ent in header_doc.ents if ent.label_ == "ORG"]
                gpe_ents = [ent for ent in header_doc.ents if ent.label_ == "GPE"]
                if org_ents:
                    exp_entry["company"] = org_ents[0].text.strip()
                if not exp_entry["company"] and gpe_ents:
                    exp_entry["company"] = gpe_ents[0].text.strip()
                title_text = header_text
                if exp_entry["company"]:
                    title_text = re.sub(re.escape(exp_entry["company"]), "", title_text, flags=re.IGNORECASE)
                for loc in gpe_ents:
                    title_text = title_text.replace(loc.text, "")
                title_text = title_text.strip(" ,;-")
                if title_text:
                    exp_entry["title"] = title_text
                for desc in desc_lines:
                    if desc:
                        exp_entry["description"].append(desc)
                if exp_entry["company"] or exp_entry["title"]:
                    data["work_experience"].append(exp_entry)

        skills_idx = find_section_index(["skills", "technical skills"])
        if skills_idx is not None:
            skills_end_idx = None
            for j in range(skills_idx + 1, len(lines)):
                if not lines[j].strip():
                    continue
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("certification") or sec.startswith("extracurricular") or sec.startswith("project"):
                    skills_end_idx = j
                    break
            if skills_end_idx is None:
                skills_end_idx = len(lines)
            skills_lines = lines[skills_idx:skills_end_idx]
            skills_text = ""
            if ':' in skills_lines[0]:
                skills_text = skills_lines[0].split(':', 1)[1]
            for ln in skills_lines[1:]:
                if not ln.strip():
                    break
                sec = ln.strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("certification") or sec.startswith("extracurricular") or sec.startswith("project"):
                    break
                skills_text += (" " + ln) if skills_text else ln
            for skill in re.split(r'[,;|]\s*', skills_text):
                skill = skill.strip()
                if skill:
                    data["skills"].append(skill)

        cert_idx = find_section_index(["certifications", "certification"])
        if cert_idx is not None:
            cert_end_idx = None
            for j in range(cert_idx + 1, len(lines)):
                if not lines[j].strip():
                    continue
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("skills") or sec.startswith("extracurricular") or sec.startswith("project"):
                    cert_end_idx = j
                    break
            if cert_end_idx is None:
                cert_end_idx = len(lines)
            cert_lines = lines[cert_idx:cert_end_idx]
            cert_text = ""
            if ':' in cert_lines[0]:
                cert_text = cert_lines[0].split(':', 1)[1]
            for ln in cert_lines[1:]:
                if not ln.strip():
                    break
                sec = ln.strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("skills") or sec.startswith("extracurricular") or sec.startswith("project"):
                    break
                cert_text += (" " + ln) if cert_text else ln
            for cert in re.split(r'[,;|]\s*', cert_text):
                cert = cert.strip()
                if cert:
                    data["certifications"].append(cert)

        extra_idx = find_section_index(["extracurricular", "activities"])
        if extra_idx is not None:
            extra_end_idx = None
            for j in range(extra_idx + 1, len(lines)):
                if not lines[j].strip():
                    continue
                sec = lines[j].strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("project"):
                    extra_end_idx = j
                    break
            if extra_end_idx is None:
                extra_end_idx = len(lines)
            extra_lines = lines[extra_idx:extra_end_idx]
            extra_text = ""
            if ':' in extra_lines[0]:
                extra_text = extra_lines[0].split(':', 1)[1]
            for ln in extra_lines[1:]:
                if not ln.strip():
                    break
                sec = ln.strip().lower()
                if sec.startswith("education") or sec.startswith("experience") or sec.startswith("skills") or sec.startswith("certification") or sec.startswith("project"):
                    break
                extra_text += (" " + ln) if extra_text else ln
            if extra_text:
                items = re.split(r'[,;]\s*', extra_text)
            else:
                items = [ln for ln in extra_lines[1:] if ln.strip()]
            for item in items:
                item = item.strip("•*- \t")
                if item:
                    data["extracurriculars"].append(item)

        return data

