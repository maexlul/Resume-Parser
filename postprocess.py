# -*- coding: utf-8 -*-
"""postprocess

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ecDJcPJmvsMjsdp5DKwgcv1w53xeSNzL
"""

"""Post-processing to clean and normalize parsed resume data."""
class PostProcessor:
    def process(self, data: dict) -> dict:
        """
        Clean and normalize the parsed data:
        - Strip whitespace and remove trailing punctuation.
        - Deduplicate list fields (skills, certifications, extracurriculars).
        - Ensure each field has a default value if None.
        """
        def clean_str(s):
            return s.strip().rstrip(",;:-") if isinstance(s, str) else s

        for field in ["name", "email", "phone", "location", "summary"]:
            if data.get(field):
                data[field] = clean_str(data[field])

        for field in ["skills", "certifications", "extracurriculars"]:
            items = []
            seen = set()
            for item in data.get(field, []):
                item_clean = clean_str(item)
                key = item_clean.lower()
                if item_clean and key not in seen:
                    seen.add(key)
                    items.append(item_clean)
            data[field] = items

        unique_education = []
        seen_ed = set()
        for ed in data.get("education", []):
            school = clean_str(ed.get("school") or "")
            degree = clean_str(ed.get("degree") or "")
            gpa = clean_str(ed.get("GPA") or "")
            grad = clean_str(ed.get("grad_date") or "")
            ed_tuple = (school.lower(), degree.lower(), gpa, grad)
            if ed_tuple not in seen_ed:
                seen_ed.add(ed_tuple)
                ed["school"] = school or None
                ed["degree"] = degree or None
                ed["GPA"] = gpa or None
                ed["grad_date"] = grad or None
                unique_education.append(ed)
        data["education"] = unique_education

        unique_exps = []
        seen_exp = set()
        for exp in data.get("work_experience", []):
            company = clean_str(exp.get("company") or "")
            title = clean_str(exp.get("title") or "")
            dates = clean_str(exp.get("dates") or "")
            exp_tuple = (company.lower(), title.lower(), dates.lower())
            if exp_tuple not in seen_exp:
                seen_exp.add(exp_tuple)
                clean_desc = [clean_str(d) for d in exp.get("description", [])]
                exp["company"] = company or None
                exp["title"] = title or None
                exp["dates"] = dates or None
                exp["description"] = clean_desc
                unique_exps.append(exp)
        data["work_experience"] = unique_exps

        return data



